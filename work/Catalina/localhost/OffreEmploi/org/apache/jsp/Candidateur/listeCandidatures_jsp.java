/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-03-10 15:50:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Candidateur;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.util.List;
import Candidateur.Model.Candidateur;
import Candidateur.DAO.CandidateurDAO;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import Utils.DatabaseConnection;

public final class listeCandidatures_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("Utils.DatabaseConnection");
    _jspx_imports_classes.add("Candidateur.DAO.CandidateurDAO");
    _jspx_imports_classes.add("Candidateur.Model.Candidateur");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "Les JSPs ne permettent que GET, POST ou HEAD. Jasper permet aussi OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"fr\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Liste des Candidatures</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"styles.css\">\r\n");
      out.write("    <script>\r\n");
      out.write("        // Fonction de tri des colonnes\r\n");
      out.write("        function sortTable(n) {\r\n");
      out.write("            let table = document.getElementById(\"candidaturesTable\");\r\n");
      out.write("            let rows, switching = true, shouldSwitch, i;\r\n");
      out.write("            let dir = \"asc\", switchcount = 0;\r\n");
      out.write("\r\n");
      out.write("            while (switching) {\r\n");
      out.write("                switching = false;\r\n");
      out.write("                rows = table.rows;\r\n");
      out.write("\r\n");
      out.write("                for (i = 1; i < (rows.length - 1); i++) {\r\n");
      out.write("                    shouldSwitch = false;\r\n");
      out.write("                    let x = rows[i].getElementsByTagName(\"TD\")[n].innerText.toLowerCase();\r\n");
      out.write("                    let y = rows[i + 1].getElementsByTagName(\"TD\")[n].innerText.toLowerCase();\r\n");
      out.write("\r\n");
      out.write("                    if ((dir === \"asc\" && x > y) || (dir === \"desc\" && x < y)) {\r\n");
      out.write("                        shouldSwitch = true;\r\n");
      out.write("                        break;\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                if (shouldSwitch) {\r\n");
      out.write("                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n");
      out.write("                    switching = true;\r\n");
      out.write("                    switchcount++;\r\n");
      out.write("                } else if (switchcount === 0 && dir === \"asc\") {\r\n");
      out.write("                    dir = \"desc\";\r\n");
      out.write("                    switching = true;\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        // Fonction de filtrage par statut\r\n");
      out.write("        function filterStatus() {\r\n");
      out.write("            let filter = document.getElementById(\"statusFilter\").value.toLowerCase();\r\n");
      out.write("            let table = document.getElementById(\"candidaturesTable\");\r\n");
      out.write("            let rows = table.getElementsByTagName(\"tr\");\r\n");
      out.write("\r\n");
      out.write("            for (let i = 1; i < rows.length; i++) {\r\n");
      out.write("                let statusCell = rows[i].getElementsByTagName(\"td\")[3];\r\n");
      out.write("                if (statusCell) {\r\n");
      out.write("                    let statusText = statusCell.innerText.toLowerCase();\r\n");
      out.write("                    rows[i].style.display = (filter === \"\" || statusText === filter) ? \"\" : \"none\";\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h2>Liste des Candidatures</h2>\r\n");
      out.write("\r\n");
      out.write("<!-- Filtre par statut -->\r\n");
      out.write("<label for=\"statusFilter\">Filtrer par statut :</label>\r\n");
      out.write("<select id=\"statusFilter\" onchange=\"filterStatus()\">\r\n");
      out.write("    <option value=\"\">Tous</option>\r\n");
      out.write("    <option value=\"en attente\">En attente</option>\r\n");
      out.write("    <option value=\"accepte\">Accepté</option>\r\n");
      out.write("    <option value=\"refuse\">Refusé</option>\r\n");
      out.write("</select>\r\n");
      out.write("\r\n");

    Connection conn = null;
    try {
        conn = DatabaseConnection.getConnection();
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
    CandidateurDAO dao = new CandidateurDAO(conn);
    List<Candidateur> candidatures = dao.getAllCandidatures();

      out.write("\r\n");
      out.write("\r\n");
      out.write("<table border=\"1\" id=\"candidaturesTable\">\r\n");
      out.write("    <tr>\r\n");
      out.write("        <th onclick=\"sortTable(0)\">ID ⬍</th>\r\n");
      out.write("        <th onclick=\"sortTable(1)\">Candidat ⬍</th>\r\n");
      out.write("        <th onclick=\"sortTable(2)\">Offre ⬍</th>\r\n");
      out.write("        <th onclick=\"sortTable(3)\">Statut ⬍</th>\r\n");
      out.write("        <th>Actions</th>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 for (Candidateur c : candidatures) { 
      out.write("\r\n");
      out.write("    <tr>\r\n");
      out.write("        <td>");
      out.print( c.getCandidatureId() );
      out.write("</td>\r\n");
      out.write("        <td>");
      out.print( c.getCandidate().getNom() );
      out.write("</td>\r\n");
      out.write("        <td>");
      out.print( c.getOffreEmploi().getTitre() );
      out.write("</td>\r\n");
      out.write("        <td>");
      out.print( c.getStatus() );
      out.write("</td>\r\n");
      out.write("        <td>\r\n");
      out.write("            <!-- Modifier -->\r\n");
      out.write("            <form action=\"CandidatureServlet\" method=\"post\" style=\"display:inline;\">\r\n");
      out.write("                <input type=\"hidden\" name=\"candidatureId\" value=\"");
      out.print( c.getCandidatureId() );
      out.write("\">\r\n");
      out.write("                <select name=\"status\">\r\n");
      out.write("                    <option value=\"EN_ATTENTE\" ");
      out.print( c.getStatus().equals("EN_ATTENTE") ? "selected" : "" );
      out.write(">En attente</option>\r\n");
      out.write("                    <option value=\"ACCEPTE\" ");
      out.print( c.getStatus().equals("ACCEPTE") ? "selected" : "" );
      out.write(">Accepté</option>\r\n");
      out.write("                    <option value=\"REFUSE\" ");
      out.print( c.getStatus().equals("REFUSE") ? "selected" : "" );
      out.write(">Refusé</option>\r\n");
      out.write("                </select>\r\n");
      out.write("                <button type=\"submit\">Modifier</button>\r\n");
      out.write("            </form>\r\n");
      out.write("\r\n");
      out.write("            <!-- Supprimer -->\r\n");
      out.write("            <form action=\"CandidatureServlet\" method=\"post\" style=\"display:inline;\" onsubmit=\"return confirm('Êtes-vous sûr de vouloir supprimer cette candidature ?');\">\r\n");
      out.write("                <input type=\"hidden\" name=\"_method\" value=\"DELETE\">\r\n");
      out.write("                <input type=\"hidden\" name=\"candidatureId\" value=\"");
      out.print( c.getCandidatureId() );
      out.write("\">\r\n");
      out.write("                <button type=\"submit\" style=\"background-color: red; color: white;\">Supprimer</button>\r\n");
      out.write("            </form>\r\n");
      out.write("        </td>\r\n");
      out.write("    </tr>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<br><a href=\"HomeCand.jsp\">Retour</a>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
